rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }

    function isValidUserCreateRequest(user) {
      return user.size() == 5
        && 'uid' in user
        && user.uid is string
        && 'twitterAccountId' in user
        && user.twitterAccountId is string
        && 'accessToken' in user
        && user.accessToken is string
        && 'createdAt' in user
        && user.createdAt is timestamp
        && 'updatedAt' in user
        && user.updatedAt is timestamp
    }

    function isValidUserUpdateRequest(user) {
      return user.size() == 3
        && 'uid' in user
        && user.uid is string
        && 'twitterAccountId' in user
        && user.twitterAccountId is string
        && 'updatedAt' in user
        && user.updatedAt is timestamp
    }

    function isValidUserLikeCreateRequest(like) {
      return like.size() == 5
        && 'uid' in like
        && like.uid is string
        && 'tweetId' in like
        && like.tweetId is int
        && 'count' in like
        && like.count is int
        && 'createdAt' in like
        && like.createdAt is timestamp
        && 'updatedAt' in like
        && like.updatedAt is timestamp
    }

    function isValidUserLikeUpdateRequest(like) {
      return like.size() == 4
        && 'uid' in like
        && like.uid is string
        && 'tweetId' in like
        && like.tweetId is int
        && 'count' in like
        && like.count is int
        && 'updatedAt' in like
        && like.updatedAt is timestamp
    }

    function isValidLikeCreateRequest(like) {
      return like.size() == 4
        && 'tweetId' in like
        && like.tweetId is int
        && 'count' in like
        && like.count is int
        && 'createdAt' in like
        && like.createdAt is timestamp
        && 'updatedAt' in like
        && like.updatedAt is timestamp
    }

    function isValidLikeUpdateRequest(like) {
      return like.size() == 3
        && 'tweetId' in like
        && like.tweetId is int
        && 'count' in like
        && like.count is int
        && 'updatedAt' in like
        && like.updatedAt is timestamp
    }

    match /users/{userId} {
      allow get: if isUserAuthenticated(userId);
      allow create: if isUserAuthenticated(userId)
        && isValidUserCreateRequest(request.resource.data)
        && request.resource.data.uid == userId;
      allow update: if isUserAuthenticated(userId)
        && isValidUserUpdateRequest(request.resource.data)
        && request.resource.data.uid == userId;
      allow delete: if isUserAuthenticated(userId);

      match /likes/{likeId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId)
          && isValidUserLikeCreateRequest(request.resource.data)
          && request.resource.data.uid == userId;
        allow update: if isUserAuthenticated(userId)
          && isValidUserLikeUpdateRequest(request.resource.data)
          && request.resource.data.uid == userId
          && request.resource.data.tweetId == resource.data.tweetId;
        allow delete: if isUserAuthenticated(userId);
      }
    }

    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
        && isValidLikeCreateRequest(request.resource.data);
      allow update: if isAuthenticated()
        && isValidLikeUpdateRequest(request.resource.data)
        && request.resource.data.tweetId == resource.data.tweetId;
    }
  }
}